name: Update Bookstack Docs

on:
  workflow_call:
    inputs:
      book-id:
        required: true
        type: string
      chapter-id:
        required: false
        type: string
        default: ''
    secrets:
      BOOKSTACK_API_ID:
        required: true
      BOOKSTACK_API_SECRET:
        required: true
      BOOKSTACK_BASE_URL:
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload markdown files to BookStack
        env:
          BOOKSTACK_API_ID: ${{ secrets.BOOKSTACK_API_ID }}
          BOOKSTACK_API_SECRET: ${{ secrets.BOOKSTACK_API_SECRET }}
          BOOKSTACK_BOOK_ID: ${{ inputs.book-id }}
          BOOKSTACK_CHAPTER_ID: ${{ inputs.chapter-id }}
          BOOKSTACK_BASE_URL: ${{ secrets.BOOKSTACK_BASE_URL }}
        run: |
          #!/bin/bash
          set -e

          upload_md_file() {
            local FILE="$1"
            local TITLE="$2"

            if [[ ! -f "$FILE" ]]; then
              echo "‚ùå File not found: $FILE"
              return
            fi

            # Extract content after first markdown heading
            CONTENT=$(awk '
              /^#/ && !start { start = 1; next }
              start { print }
            ' "$FILE" | jq -Rs .)

            if [[ -z "$CONTENT" || "$CONTENT" == "\"\"" ]]; then
              echo "‚ùå Skipping empty file: $FILE"
              return
            fi

            # Search through the pages to find if existing
            echo "üîç Searching for existing page \"$TITLE\"..."

            PAGE_ID=$(echo "$ALL_PAGES" | jq \
              --arg name "$TITLE" \
              --arg book_id "$BOOKSTACK_BOOK_ID" \
              --arg chapter_id "$BOOKSTACK_CHAPTER_ID" '
                .data[]
                | select(.name == $name and (.book_id|tostring) == $book_id and (.chapter_id|tostring) == $chapter_id)
                | .id' | head -n 1)

            # Update page if page exist
            if [[ -n "$PAGE_ID" ]]; then
              echo "‚úèÔ∏è Updating existing page \"$TITLE\" (ID: $PAGE_ID)..."

              jq -n \
                --arg name "$TITLE" \
                --argjson markdown "$CONTENT" \
                --argjson book_id "${BOOKSTACK_BOOK_ID:-null}" \
                --argjson chapter_id "${BOOKSTACK_CHAPTER_ID:-null}" \
                '{
                  name: $name,
                  markdown: $markdown,
                  book_id: $book_id,
                  chapter_id: $chapter_id
                }' > payload.json

              curl -s -X PUT "$BOOKSTACK_BASE_URL/api/pages/$PAGE_ID" \
                -H "Authorization: Token $BOOKSTACK_API_ID:$BOOKSTACK_API_SECRET" \
                -H "Content-Type: application/json" \
                -d @payload.json

            # Create new page if page does not exist
            else
              echo "üÜï Creating new page \"$TITLE\"..."

              jq -n \
                --arg name "$TITLE" \
                --argjson markdown "$CONTENT" \
                --argjson book_id "${BOOKSTACK_BOOK_ID:-null}" \
                --argjson chapter_id "${BOOKSTACK_CHAPTER_ID:-null}" \
                '{
                  name: $name,
                  markdown: $markdown,
                  book_id: $book_id,
                  chapter_id: $chapter_id
                }' > payload.json

              curl -s -X POST "$BOOKSTACK_BASE_URL/api/pages" \
                -H "Authorization: Token $BOOKSTACK_API_ID:$BOOKSTACK_API_SECRET" \
                -H "Content-Type: application/json" \
                -d @payload.json
            fi

            rm -f payload.json
          }

          # Get all pages
          echo "üöÄ Getting all pages"
          ALL_PAGES=$(curl -s "$BOOKSTACK_BASE_URL/api/pages?count=1000" \
            -H "Authorization: Token $BOOKSTACK_API_ID:$BOOKSTACK_API_SECRET")

          # Start uploading process
          echo "üöÄ Starting upload..."

          # 1. Upload root README.md
          upload_md_file "README.md" "README"

          # 2. Upload root CHANGELOG.md
          upload_md_file "CHANGELOG.md" "CHANGELOG"

          # 3. Combine all structure files into one then upload it
          cat docs/markdown/Classes/*.md > docs/markdown/structure.md 
          upload_md_file "docs/markdown/structure.md" "Structures"

          # 4. Loop through all .md files in Modules folder using # title
          for f in docs/markdown/Modules/*.md; do
            [[ -f "$f" ]] || continue
            [[ "$(basename "$f")" == "structure.md" ]] && continue  # ‚úÖ Skip structure.md

            # Demote first-level title (# ...) to second-level (## ...)
            sed -i '0,/^# /s/^# /## /' "$f"

            # Extract the original title before modifying, for upload name
            TITLE=$(grep -m1 '^## ' "$f" | sed 's/^## //')
            [[ -n "$TITLE" ]] && upload_md_file "$f" "$TITLE" || echo "‚ùå No title in $f"
          done

          # 5. Upload first Files/*h.md as Header File
          HEADER_FILE=$(find docs/markdown/Files -type f -name '*h.md' | head -n 1)
          [[ -n "$HEADER_FILE" ]] && upload_md_file "$HEADER_FILE" "Header File"

          # 6. Upload first Files/*c.md as C Source File
          C_FILE=$(find docs/markdown/Files -type f -name '*c.md' | head -n 1)
          [[ -n "$C_FILE" ]] && upload_md_file "$C_FILE" "C Source File"

          echo "‚úÖ Upload complete."
